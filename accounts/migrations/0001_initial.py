# Generated by Django 4.0 on 2023-03-04 16:24

import accounts.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('accessToken', models.CharField(default=accounts.models.create_access_token, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
                ('stripeID', models.CharField(blank=True, max_length=100, null=True)),
                ('crm', models.CharField(choices=[('ServiceTitan', 'ServiceTitan'), ('HubSpot', 'HubSpot'), ('Zoho', 'Zoho'), ('Salesforce', 'Salesforce'), ('FieldEdge', 'FieldEdge'), ('None', 'None')], default='None', max_length=100)),
                ('tenantID', models.IntegerField(blank=True, null=True)),
                ('clientID', models.CharField(blank=True, max_length=100, null=True)),
                ('clientSecret', models.CharField(blank=True, max_length=100, null=True)),
                ('serviceTitanForSaleTagID', models.IntegerField(blank=True, null=True)),
                ('serviceTitanForRentTagID', models.IntegerField(blank=True, null=True)),
                ('serviceTitanRecentlySoldTagID', models.IntegerField(blank=True, null=True)),
                ('recentlySoldPurchased', models.BooleanField(default=False)),
                ('sfAccessToken', models.CharField(blank=True, max_length=100, null=True)),
                ('sfRefreshToken', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InviteToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('expiration', models.DateTimeField(default=accounts.models.utc_tomorrow)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.company')),
            ],
        ),
        migrations.CreateModel(
            name='Franchise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('mainCompany', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mainCompany', to='accounts.company')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('isVerified', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('active', 'ACTIVE'), ('banned', 'BANNED'), ('admin', 'ADMIN'), ('pending', 'PENDING')], default='active', max_length=100)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('otp_enabled', models.BooleanField(default=False)),
                ('otp_verified', models.BooleanField(default=False)),
                ('otp_base32', models.CharField(blank=True, max_length=255, null=True)),
                ('otp_auth_url', models.CharField(blank=True, max_length=255, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.company')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
    ]
